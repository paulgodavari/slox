// Expression.swift
// slox
//
// Created by Paul Godavari on 2021-07-21.
// Copyright Â© 2021 Paul Godavari. All rights reserved.
//
// The contents of this file is generated by the GenerateAst target.
// Copy the output from that program here.


import Foundation


protocol Visitor {
    associatedtype ReturnType
    func visitExpr(_ expr: Expr) -> ReturnType
    func visitBinaryExpr(_ expr: Binary) -> ReturnType
    func visitGroupingExpr(_ expr: Grouping) -> ReturnType
    func visitLiteralExpr(_ expr: Literal) -> ReturnType
    func visitUnaryExpr(_ expr: Unary) -> ReturnType
}


class Expr {
    func accept<V>(_ visitor: V) -> V.ReturnType where V: Visitor {
        return visitor.visitExpr(self)
    }
}


class Binary: Expr {
    var left: Expr
    var oper: Token
    var right: Expr

    init(left: Expr, oper: Token, right: Expr) {
        self.left = left
        self.oper = oper
        self.right = right
    }

    override func accept<V>(_ visitor: V) -> V.ReturnType where V: Visitor {
        return visitor.visitBinaryExpr(self)
    }
}


class Grouping: Expr {
    var expression: Expr

    init(expression: Expr) {
        self.expression = expression
    }

    override func accept<V>(_ visitor: V) -> V.ReturnType where V: Visitor {
        return visitor.visitGroupingExpr(self)
    }
}


class Literal: Expr {
    var value: Any

    init(value: Any) {
        self.value = value
    }

    override func accept<V>(_ visitor: V) -> V.ReturnType where V: Visitor {
        return visitor.visitLiteralExpr(self)
    }
}


class Unary: Expr {
    var oper: Token
    var right: Expr

    init(oper: Token, right: Expr) {
        self.oper = oper
        self.right = right
    }

    override func accept<V>(_ visitor: V) -> V.ReturnType where V: Visitor {
        return visitor.visitUnaryExpr(self)
    }
}


